{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"app/","title":"Directory: <code>app</code>","text":"<p>Purpose: This directory contains the core application logic for the VulnScanAI Flask website. It includes configuration, models, forms, views, and supporting modules.</p> <p>Subdirectories:</p> <ul> <li><code>reports</code>: Stores generated reports from various vulnerability scanners.  These reports are often in PDF or HTML format.</li> <li><code>scanners</code>: Contains the code for interacting with different vulnerability scanning tools. Each scanner has its own module for integration.</li> <li><code>static</code>: Holds static files like CSS, JavaScript, images, and PDFs.  These files are served directly to the client.</li> <li><code>templates</code>: Contains the HTML templates used to render the website's user interface. Jinja2 templating engine is used.</li> <li><code>uploads</code>: Likely stores uploaded files, such as mobile application binaries (APKs and IPAs) for MoBSF analysis.</li> <li><code>views</code>: Contains the route handlers (view functions) that define the application's behavior. These functions handle user requests and interact with the models.</li> </ul> <p>Files:</p> <ul> <li> <p><code>config.py</code>:</p> <ul> <li>Description: Configuration settings for the Flask application, such as database URLs, API keys, secret keys, and debug settings.</li> <li>Key Functionality: Defines various configuration variables for different environments (development, production, testing).  Uses <code>os.environ</code> to read configuration values from environment variables.  Includes a function to generate a secret key if one is not provided.</li> <li>Dependencies: <code>os</code></li> </ul> </li> <li> <p><code>extensions.py</code>:</p> <ul> <li>Description: Initializes and configures Flask extensions, such as Flask-SQLAlchemy for database interaction, Flask-Mail for sending emails, and Flask-Login for user authentication.</li> <li>Key Functionality: Creates instances of the extensions (e.g., <code>db = SQLAlchemy()</code>), and provides a function <code>init_app(app)</code> to initialize the extensions with the Flask application instance.</li> <li>Dependencies: <code>flask_sqlalchemy</code>, <code>flask_mail</code>, <code>flask_login</code>, <code>flask_migrate</code></li> </ul> </li> <li> <p><code>forms.py</code>:</p> <ul> <li>Description: Defines the forms used for user input, such as login, registration, scan configuration, and password reset.  Uses Flask-WTF for form handling and CSRF protection.</li> <li>Key Functionality: Defines form classes (e.g., <code>LoginForm</code>, <code>RegistrationForm</code>, <code>ScanForm</code>) using WTForms fields and validators.  Includes custom validators for email uniqueness, password strength, etc.</li> <li>Dependencies: <code>flask_wtf</code>, <code>wtforms</code>, <code>wtforms.validators</code>, <code>email_validator</code></li> </ul> </li> <li> <p><code>__init__.py</code>:</p> <ul> <li>Description: Makes the <code>app</code> directory a Python package. Initializes the Flask application instance and configures it.</li> <li>Key Functionality: Creates the Flask application instance (<code>app = Flask(__name__)</code>), loads configuration from <code>config.py</code>, initializes extensions using <code>extensions.init_app(app)</code>, registers blueprints for the different views (e.g., <code>auth_bp</code>, <code>main_bp</code>, etc.).  Also sets up logging.</li> <li>Dependencies: <code>flask</code>, <code>config</code>, <code>extensions</code>, <code>views</code>, <code>logging</code></li> </ul> </li> <li> <p><code>models.py</code>:</p> <ul> <li>Description: Defines the database models used by the application, such as <code>User</code>, <code>ScanResult</code>, <code>Subscription</code>, etc. Uses Flask-SQLAlchemy to define database tables and relationships.</li> <li>Key Functionality: Defines classes that inherit from <code>db.Model</code> to represent database tables. Includes methods for creating, reading, updating, and deleting data.</li> <li>Dependencies: <code>flask_sqlalchemy</code>, <code>flask_login</code>, <code>datetime</code></li> </ul> </li> <li> <p><code>reports/</code>, <code>scanners/</code>, <code>static/</code>, <code>templates/</code>, <code>uploads/</code>, <code>views/</code>: (These directories are documented separately)</p> </li> </ul>"},{"location":"scanners/","title":"Directory: <code>app/scanners</code>","text":"<p>Purpose: This directory contains the code for integrating with different vulnerability scanning tools. Each file in this directory represents a scanner integration. The scanners are designed to be modular and easily extensible.</p> <p>Files:</p> <ul> <li> <p><code>cloudsploit_scanner_azure.py</code>:</p> <ul> <li>Description: Integrates with the CloudSploit tool to perform security audits on Azure cloud environments. Uses the CloudSploit API (or command-line interface) to initiate scans and retrieve results.</li> <li>Key Functionality:<ul> <li><code>scan(target, credentials)</code>: Executes CloudSploit against the specified Azure subscription. Takes Azure credentials as input for authenticated scanning.</li> <li>Parses the CloudSploit JSON output to extract findings.</li> <li>Normalizes the findings into a standardized format for reporting.</li> </ul> </li> <li>Dependencies: <code>subprocess</code> (if using the CLI), <code>requests</code> (if using the API), <code>json</code>, <code>os</code></li> </ul> </li> <li> <p><code>mobsf_scanner.py</code>:</p> <ul> <li>Description: Integrates with the Mobile Security Framework (MoBSF) to analyze mobile application binaries (APKs and IPAs). Uses the MoBSF API to upload binaries and retrieve analysis reports.</li> <li>Key Functionality:<ul> <li><code>scan(binary_path)</code>: Uploads the mobile application binary to MoBSF and initiates the analysis.</li> <li>Retrieves the MoBSF report in JSON or XML format.</li> <li>Parses the report to extract vulnerabilities, code analysis findings, and other security-related information.</li> </ul> </li> <li>Dependencies: <code>requests</code>, <code>json</code>, <code>os</code></li> </ul> </li> <li> <p><code>nikto_scanner.py</code>:</p> <ul> <li>Description: Integrates with the Nikto web server scanner to identify potential vulnerabilities in web servers. Uses the Nikto command-line interface to initiate scans and parse the output.</li> <li>Key Functionality:<ul> <li><code>scan(target_url, options=None)</code>: Executes Nikto against the specified target URL with optional command-line arguments.</li> <li>Parses the Nikto output to extract identified vulnerabilities.</li> <li>Converts the Nikto output into a standardized format.</li> </ul> </li> <li>Dependencies: <code>subprocess</code>, <code>os</code></li> </ul> </li> <li> <p><code>nmap_scanner.py</code>:</p> <ul> <li>Description: Integrates with the Nmap port scanner to perform network reconnaissance and identify open ports and services. Uses the Nmap command-line interface.</li> <li>Key Functionality:<ul> <li><code>scan(target_host, options=None)</code>: Executes Nmap against the specified target host with optional command-line arguments (e.g., port ranges, scan types).</li> <li>Parses the Nmap XML output to extract open ports, service versions, and OS detection results.</li> </ul> </li> <li>Dependencies: <code>subprocess</code>, <code>os</code>, <code>xml.etree.ElementTree</code></li> </ul> </li> <li> <p><code>openvas_scanner.py</code>:</p> <ul> <li>Description: Integrates with the OpenVAS vulnerability scanner (if you're using it).</li> <li>Key Functionality: (Describe how it works)</li> <li>Dependencies: (List dependencies)</li> </ul> </li> <li> <p><code>prowler_scanner_aws.py</code>:</p> <ul> <li>Description: Integrates with Prowler to perform security assessments in AWS environments.</li> <li>Key Functionality: Executes Prowler, parses the results, and stores them.</li> <li>Dependencies: <code>subprocess</code>, <code>json</code>, <code>os</code></li> </ul> </li> <li> <p><code>prowler_scanner_gcp.py</code>:</p> <ul> <li>Description: Integrates with Prowler to perform security assessments in GCP environments.</li> <li>Key Functionality: Executes Prowler, parses the results, and stores them.</li> <li>Dependencies: <code>subprocess</code>, <code>json</code>, <code>os</code></li> </ul> </li> <li> <p><code>sqlmap_scanner.py</code>:</p> <ul> <li>Description: Integrates with the sqlmap SQL injection tool to identify and exploit SQL injection vulnerabilities.</li> <li>Key Functionality: Executes sqlmap against a target URL and parses the results.</li> <li>Dependencies: <code>subprocess</code>, <code>os</code></li> </ul> </li> <li> <p><code>ssl_scanner.py</code>:</p> <ul> <li>Description: Performs SSL/TLS security checks on a target host.</li> <li>Key Functionality: Executes <code>sslscan</code> or similar tools and parses the results.</li> <li>Dependencies: <code>subprocess</code>, <code>os</code></li> </ul> </li> <li> <p><code>zap_scanner.py</code>:</p> <ul> <li>Description: Integrates with the OWASP ZAP proxy to perform dynamic application security testing (DAST).</li> <li>Key Functionality: Starts ZAP, configures it, runs a scan against a target URL, and retrieves the report.</li> <li>Dependencies: <code>requests</code>, <code>os</code></li> </ul> </li> <li> <p><code>__init__.py</code>:</p> <ul> <li>Description: Makes the <code>scanners</code> directory a Python package, allowing other modules to import the scanner integrations.</li> <li>Key Functionality: Likely contains import statements to make the scanner modules available: <code>from .nmap_scanner import scan as nmap_scan</code>. This enables easy calling of all scan functions.</li> <li>Dependencies: None</li> </ul> </li> </ul>"},{"location":"views/","title":"Directory: <code>app/views</code>","text":"<p>Purpose: This directory contains the view functions (route handlers) that define the application's behavior. These functions handle user requests, interact with models, and render HTML templates.</p> <p>Files:</p> <ul> <li> <p><code>analyze_report_ai.py</code>:</p> <ul> <li>Description: Analyzes scan reports using the Google Gemini model. Extracts text from PDFs, masks PII, and generates insights.</li> <li>Key Functionality: Uses <code>GeminiReportAnalyzer</code> class to handle PDF processing, PII masking, and Gemini API interactions.</li> <li>Dependencies: <code>google.generativeai</code>, <code>pypdf</code>, <code>flask</code>, <code>re</code></li> </ul> </li> <li> <p><code>auth.py</code>:</p> <ul> <li>Description: Handles user authentication routes (login, registration, password reset, update password, email verification, etc.).</li> <li>Key Functionality: Manages user registration, login, logout, password reset, and email verification using Flask-Login, <code>bcrypt</code>, and itsdangerous for secure token generation and email verification process.</li> <li>Dependencies: <code>flask</code>, <code>flask_login</code>, <code>bcrypt</code>, <code>forms</code>, <code>models</code>, <code>flask_mail</code>, <code>itsdangerous</code>, <code>requests</code>, <code>os</code></li> </ul> </li> <li> <p><code>genai.py</code>:</p> <ul> <li>Description: Contains routes and functions for interacting with the Gemini AI model for security report analysis.</li> <li>Key Functionality: Handles uploading reports, analyzing them with Gemini, and managing chat sessions for follow-up questions.</li> <li>Dependencies: <code>flask</code>, <code>flask_login</code>, <code>google.generativeai</code>, <code>werkzeug</code>, <code>os</code>, <code>logging</code>, <code>app.analyze_report_ai</code></li> </ul> </li> <li> <p><code>main.py</code>:</p> <ul> <li>Description: Contains the main application routes (home page, profile page, about page, scan page, contact page, pricing page, download report page, etc.).</li> <li>Key Functionality: Handles core web application routes, manages vulnerability scans, provides report downloads, and facilitates user communication via contact forms.</li> <li>Dependencies: <code>flask</code>, <code>flask_login</code>, <code>werkzeug</code>, <code>os</code>, <code>requests</code>, <code>app.scanners.*</code>, <code>app.forms</code>, <code>app.models</code>, <code>app.analyze_report_ai</code>, <code>flask_mail</code>, <code>logging</code>, <code>json</code></li> </ul> </li> <li> <p><code>payments.py</code>:</p> <ul> <li>Description: Handles payment-related functionality using the PayPal API (creates orders, captures payments, handles cancellations, updates subscriptions).</li> <li>Key Functionality: Integrates with PayPal to create and capture payments, manage user subscriptions, and record payment transactions in the database. Includes retry logic and error handling for API interactions.</li> <li>Dependencies: <code>flask</code>, <code>flask_login</code>, <code>app.extensions</code>, <code>app.models</code>, <code>datetime</code>, <code>os</code>, <code>requests</code>, <code>logging</code>, <code>uuid</code>, <code>time</code>, <code>random</code>, <code>sqlalchemy.exc</code></li> </ul> </li> <li> <p><code>__init__.py</code>:</p> <ul> <li>Description: Makes the <code>views</code> directory a Python package.</li> <li>Key Functionality: Registers blueprints for the view modules (e.g., <code>auth</code>, <code>main</code>, <code>payments</code>, <code>genai</code>).</li> <li>Dependencies: <code>flask</code></li> </ul> </li> </ul>"}]}